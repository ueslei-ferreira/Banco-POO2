import datetime
import random
from conexao_bd import *
from cliente_servidor import *
class Conta():
    _total_contas = 0
    
    __slots__ = ['_numero', '_cliente','_saldo', '_limite']
    def __init__(self, numero, cliente, saldo, limite):
        self._numero = numero
        self._cliente = cliente
        self._saldo = saldo
        self._limite = limite
        Conta._total_contas += 1
    @staticmethod
    def get_total_contas():
        return Conta._total_contas
    @property
    def numero(self):
        return self._numero
    @numero.setter
    def numero(self, valor):
        self._numero = valor
        
    @property
    def saldo(self):
        return self._saldo
    @saldo.setter
    def saldo(self, saldo):
        self._saldo = saldo        
    @property
    def cliente(self):
        return self._cliente
    @cliente.setter
    def cliente(self, valor):
        self._cliente = valor
    
    @property
    def limite(self):
        return self._limite
    @limite.setter
    def limite(self, valor):
        self._limite = valor
    
    @property
    def historico(self):
        return self._historico
            
    def transfere(self,valor, destino):
        self.saca(valor, True)
        destino.deposita(valor, True)
            
class Cliente():
    __slots__ = ['_nome', '_sobrenome','_cpf','_usuario', '_senha']
     
    def __init__(self, nome, sobrenome, cpf, usuario, senha):
        self._nome = nome
        self._sobrenome = sobrenome
        self._cpf = cpf
        self._usuario = usuario
        self._senha = senha
        
    @property
    def nome(self):
        return self._nome
    @nome.setter
    def nome(self, valor):
        self._nome = valor
    
    @property
    def sobrenome(self):
        return self._sobrenome
    @sobrenome.setter
    def sobrenome(self, valor):
        self._sobrenome = valor
        
    @property
    def cpf(self):
        return self._cpf
    @cpf.setter
    def cpf(self, valor):
        self._cpf = valor
    
    @property
    def usuario(self):
        return self._usuario
    
    @property
    def senha(self):
        return self._senha
    
class Banco():
    def __init__(self):
        self._bd = BD()
        self._conta = ''
        self._pessoa = ''
        self._historico = ''
        self.serv = Serv_Cliente()
    @property
    def conta(self):
        return self._conta
    @property
    def historico(self):
        return self._historico
    @property
    def bd(self):
        return self._bd
    def add_contas(self,numero,cliente, limite,):
        self.serv.principal(f'1,{cliente.cpf}, {cliente.nome}, {cliente.sobrenome}, {numero},{limite}, {cliente.usuario}, {cliente.senha}\r\n')
        
    def cadastra_conta(self, nome, sobrenome, cpf, limite, usuario, senha):
        self.serv.principal(f'2,{cpf}\r\n')
        ver_c = self.serv.ret
        t_c = len(ver_c)
        
        if t_c == 0:
            #se encontrar o CPF, sair
            ver_u = self._bd.verifica_usuario(usuario)
            t_u = len(ver_u)
            if t_u == 1:        
                #se encontrar o usuario, sair
                return 1
            else:
                cli = Cliente(nome, sobrenome, cpf, usuario, senha)
                numero_conta = random.randint(1, 999)
                self.add_contas(numero_conta,cli, limite)
            return 2
        else:
            return 0
    def login(self, usuario, senha):
        lista = self._bd.busca_login(usuario, senha)
        dados = None
        for item in lista:
            dados = item
        if dados != None:
            tam = 0
            for item in dados:
                tam +=1
            if tam >1:
                if usuario == dados[0]:
                    if senha == dados[1]:
                        c, p = self._bd.recupera(usuario, senha)
                        
                        for item in p:
                            pessoa = item
                        for item in c:
                            conta = item
                        self._pessoa = Cliente(pessoa[1], pessoa[2],pessoa[0]," "," ")
                        self._conta = Conta(conta[0],self._pessoa, conta[1], conta[2],)
                        return True
            else:
                return False
    def dep(self, valor):
        self._bd.deposita(valor, self._pessoa.cpf, f"Depositou {valor} - {datetime.datetime.today()}")
        self._conta.saldo, self._historico = self._bd.att_saldo_hist(self._pessoa.cpf)
        
    def sac(self, valor):
        self._bd.saca(valor, self._pessoa.cpf, f"Sacou {valor} - {datetime.datetime.today()}")
        self._conta.saldo, self._historico = self._bd.att_saldo_hist(self._pessoa.cpf)
    def extrato(self):
        self._bd.att_hist(f"Tirou extrato em - {datetime.datetime.today()}", self._pessoa.cpf)
        self._conta.saldo, self._historico = self._bd.att_saldo_hist(self._pessoa.cpf)
    def transfere(self, valor, numero):
        res = self._bd.transfere(valor, self._pessoa.cpf, numero, f"Transeferencia em - {datetime.datetime.today()} - R$ {valor}")
        return res